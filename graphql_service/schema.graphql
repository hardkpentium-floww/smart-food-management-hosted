schema {
  query: Query
  mutation: Mutation
}

union AddMealForUserResponse = MealAddSuccess | MealAddFailure

union GetItemsResponse = Items | ItemsNotFound

union ScheduleMealResponse = ScheduleMealSuccess | ScheduleMealFailure

enum BaseSizeUnitEnum {
  KG
  PISCES
  LITTERS
}

enum FoodItemCategoryEnum {
  RICE
  PANCAKE
  BEVERAGES
}

enum MealTypeEnum {
  FULL
  HALF
  CUSTOM
}

enum ServingSizeUnitEnum {
  PISCES
  LADDLE
  GLASS
}

enum TypeEnum {
  BREAKFAST
  LUNCH
  DINNER
}

type Item {
  id: String
  name: String
  category: FoodItemCategoryEnum
  baseSizeUnit: BaseSizeUnitEnum
  servingSizeUnit: ServingSizeUnitEnum
}

type Items {
  items: [Item]
}

type ItemsNotFound {
  message: String
}

type MealAddFailure {
  message: String
}

type MealAddSuccess {
  userMealId: String
}

type ScheduleMealFailure {
  message: String
}

type ScheduleMealSuccess {
  mealId: String
}

input AddMealForUserParams {
  userId: String
  itemIds: [Int]
  quantities: [Int]
  date: String
  type: TypeEnum = null
  mealType: MealTypeEnum = null
  skipMeal: Boolean
}

input GetItemsParams {
  offset: Int!
  limit: Int!
}

input ScheduleMealParams {
  itemIds: [String]
  fullMealQuantities: [Int]
  halfMealQuantities: [Int]
  date: String
  type: TypeEnum = null
  mealType: MealTypeEnum = null
}

type Query {
  getItems(params: GetItemsParams!): GetItemsResponse
}

type Mutation {
  addMealForUser(params: AddMealForUserParams!): AddMealForUserResponse!
  scheduleMeal(params: ScheduleMealParams!): ScheduleMealResponse!
}
